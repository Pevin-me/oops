Array:  
Code: 
#include <iostream> 
using namespace std; 
 
class Queue { 
private: 
    int front, rear, size; 
    int* queue; 
public: 
    Queue(int s) { 
        front = rear = -1; 
        size = s; 
        queue = new int[s]; 
    } 
 
    ~Queue() { 
        delete[] queue; 
    } 
 
    void enqueue(int value) { 
        if ((rear + 1) % size == front) { 
            cout << "Queue is full\n"; 
            return; 
        } 
        if (front == -1) front = 0; 
        rear = (rear + 1) % size; 
        queue[rear] = value; 
        cout << "Inserted " << value << endl; 
    } 
 
    bool search(int value) { 
        if (front == -1) { 
            cout << "Queue is empty\n"; 
            return false; 
        } 
        for (int i = front; i != rear; i = (i + 1) % size) { 
            if (queue[i] == value) return true; 
        } 
        if (queue[rear] == value) return true; 
        return false; 
    } 
}; 
 
int main() { 
    int size, choice, value; 
    cout << "Enter the size of the queue: "; 
    cin >> size; 
    Queue q(size); 
 
    cout << "\nMenu:\n"; 
    cout << "1. Insert\n"; 
    cout << "2. Search\n"; 
    cout << "3. Exit\n"; 
 
    do { 
        cout << "Enter your choice: "; 
        cin >> choice; 
 
        switch (choice) { 
        case 1: 
            cout << "Enter value to insert: "; 
            cin >> value; 
            q.enqueue(value); 
            break; 
        case 2: 
            cout << "Enter value to search: "; 
            cin >> value; 
            if (q.search(value)) { 
                cout << "Value found! \n"; 
            } else { 
                cout << "Value not found! \n"; 
            } 
            break; 
        case 3: 
            cout << "Exiting\n"; 
            break; 
        default: 
            cout << "Invalid choice!\n"; 
        } 
    } while (choice != 3); 
    return 0; 
} 
 
